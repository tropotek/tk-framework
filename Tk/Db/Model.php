<?php
namespace Tk\Db;

use Tk\ObjectUtil;
use Tk\Traits\DataTrait;
use Tk\DataMap\DataMap;
use Tk\Db;

abstract class Model
{
    use DataTrait;

    /**
     * Class datamaps, by default each class has a single DataMap
     * generated by the getDataMap function
     * @var DataMap[]|array
     */
    protected static array $_MAPS = [];


    /**
     * Magic method called by DbStatement to map a row to an object
     * In this case we use a DataMap to load the object with PHP values
     */
    public function __map(array $row): void
    {
        $map = static::getDataMap();
        $map->loadObject($this, $row);
    }

    /**
     * Auto generate a DataMap for this object.
     *
     * Default table name is the snake case of the class name, 'MenuItem' => 'menu_item'
     * Default view name is the same with 'v_' prepended, ''v_menu_item'
     * If the view table does not exist it is ignored
     *
     * Override this method if you need to create a custom DataMap with different table names
     */
    public static function getDataMap(): DataMap
    {
        $map = self::$_MAPS[static::class] ?? null;
        if (!is_null($map)) return $map;

        // autogen table/view name from class
        $table = strtolower(preg_replace('/(?<!^)[A-Z]+|(?<!^|\d)[\d]+/', '_$0', ObjectUtil::basename(static::class)));
        $view = "v_{$table}";

        Db::$LOG = false;   // disable cache of last statement
        if (!Db::tableExists($view)) $view = $table;

        $v_meta = [];
        $t_meta = Db::getTableInfo($table);
        if (!empty($view)) {
            $v_meta = Db::getTableInfo($view);
        }
        $roCols = array_diff_key($v_meta, $t_meta);
        Db::$LOG = true;

        $map = new DataMap();

        // autogenerate a data map from DB and object metadata
        foreach ($t_meta+$roCols as $meta) {
            if (!property_exists(static::class, $meta->name_camel)) continue;

            $type = DataMap::makeType($meta);
            if ($meta->is_primary_key) {
                $type->setFlag(DataMap::PRI);
            }
            if ($roCols[$meta->name] ?? false) {
                $type->setAccess(DataMap::READ);
            }
            $map->addType($type);
        }

        self::$_MAPS[static::class] = $map;
        return $map;
    }

	/**
	 * load properties of this object from database
	 * necessary to set properties if using views
	 */
    public function reload(): void
    {
        $map = $this->getDataMap();
        $priKey = $map->getPrimaryKey()?->getProperty();
        if (is_null($priKey)) return;
        $id = $this->$priKey;

        if ($id && method_exists($this, 'get')) {
            $obj = static::get($id);
        } elseif ($id && method_exists($this, 'find')) {
            $obj = static::find($id);
        } else {
            $obj = new static();
        }
        if (is_null($obj)) return;
		foreach (get_object_vars($obj) as $prop => $val) {
			$this->$prop = $val;
		}
    }

}